// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package data

import (
	"context"
	"database/sql"
)

const checkinUser = `-- name: CheckinUser :exec

INSERT INTO attendance (
  userid, date
) VALUES (
  ?, ?
)
`

type CheckinUserParams struct {
	Userid sql.NullString
	Date   sql.NullString
}

// ----------------------
func (q *Queries) CheckinUser(ctx context.Context, arg CheckinUserParams) error {
	_, err := q.db.ExecContext(ctx, checkinUser, arg.Userid, arg.Date)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
  userid, name, data
) VALUES (
  ?, ?, ?
)
`

type CreateUserParams struct {
	Userid sql.NullString
	Name   sql.NullString
	Data   sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Userid, arg.Name, arg.Data)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
    WHERE userid = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userid sql.NullString) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userid)
	return err
}

const getUser = `-- name: GetUser :one
SELECT userid, name, data FROM users
    WHERE userid = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userid sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userid)
	var i User
	err := row.Scan(&i.Userid, &i.Name, &i.Data)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT userid, name, data FROM users
    ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.Userid, &i.Name, &i.Data); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET name = ?, data = ?
    WHERE userid = ?
`

type UpdateUserParams struct {
	Name   sql.NullString
	Data   sql.NullString
	Userid sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Name, arg.Data, arg.Userid)
	return err
}
