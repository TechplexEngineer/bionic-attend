// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package data

import (
	"context"
)

const checkinUser = `-- name: CheckinUser :exec
INSERT INTO attendance (
  userid, date
) VALUES (
  ?, ?
)
`

type CheckinUserParams struct {
	Userid string
	Date   string
}

func (q *Queries) CheckinUser(ctx context.Context, arg CheckinUserParams) error {
	_, err := q.db.ExecContext(ctx, checkinUser, arg.Userid, arg.Date)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
  userid, first_name, last_name, data
) VALUES (
  ?, ?, ?, ?
)
`

type CreateUserParams struct {
	Userid    string
	FirstName string
	LastName  string
	Data      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Userid,
		arg.FirstName,
		arg.LastName,
		arg.Data,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
    WHERE userid = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userid string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userid)
	return err
}

const getUser = `-- name: GetUser :one
SELECT userid, first_name, last_name, data FROM users
    WHERE userid = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userid)
	var i User
	err := row.Scan(
		&i.Userid,
		&i.FirstName,
		&i.LastName,
		&i.Data,
	)
	return i, err
}

const isUserCheckedIn = `-- name: IsUserCheckedIn :one
SELECT count(*) FROM attendance
    WHERE date = ? AND userid = ?
`

type IsUserCheckedInParams struct {
	Date   string
	Userid string
}

func (q *Queries) IsUserCheckedIn(ctx context.Context, arg IsUserCheckedInParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, isUserCheckedIn, arg.Date, arg.Userid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listUsers = `-- name: ListUsers :many
SELECT userid, first_name, last_name, data FROM users
    ORDER BY last_name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Userid,
			&i.FirstName,
			&i.LastName,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET first_name = ?, last_name = ?, data = ?
    WHERE userid = ?
`

type UpdateUserParams struct {
	FirstName string
	LastName  string
	Data      string
	Userid    string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.Data,
		arg.Userid,
	)
	return err
}
